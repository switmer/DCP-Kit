{
  "tools": [
    {
      "name": "list_files",
      "description": "Recursively list code files in a repository with glob filters.",
      "parameters": {
        "type": "object",
        "properties": {
          "root": {
            "type": "string",
            "description": "Root directory to start crawling from"
          },
          "patterns": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Glob patterns to match files against"
          }
        },
        "required": ["root"]
      }
    },
    {
      "name": "read_file",
      "description": "Returns raw text of a given file path.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the file to read"
          }
        },
        "required": ["path"]
      }
    },
    {
      "name": "extract_component_api",
      "description": "Parse a component file and emit props / default values / doc comments.",
      "parameters": {
        "type": "object",
        "properties": {
          "fileText": {
            "type": "string",
            "description": "Raw component file content"
          }
        },
        "required": ["fileText"]
      }
    },
    {
      "name": "extract_tokens_used",
      "description": "Detect design-token references inside CSS/JS/TSX text.",
      "parameters": {
        "type": "object",
        "properties": {
          "fileText": {
            "type": "string",
            "description": "Raw file content to analyze"
          }
        },
        "required": ["fileText"]
      }
    },
    {
      "name": "write_schema",
      "description": "Persist a Component.dcp.json or Tokens.dcp.json to disk.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to write the file to"
          },
          "payload": {
            "type": "object",
            "description": "Data to write"
          }
        },
        "required": ["path", "payload"]
      }
    },
    {
      "name": "propose_refactor",
      "description": "Suggest API or token refactors; returns a markdown diff.",
      "parameters": {
        "type": "object",
        "properties": {
          "componentSchema": {
            "type": "object",
            "description": "Component DCP schema"
          }
        },
        "required": ["componentSchema"]
      }
    }
  ]
} 